// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Do ALU computation
    Mux16(a=aout, b=inM, sel=instruction[12], out=aluoperand);
    ALU(x=dout, y=aluoperand, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, out=outM, zr=zero, ng=negative);

    // Store result
    // Control
    And(a=instruction[15], b=instruction[3], out=writeM);
    And(a=instruction[15], b=instruction[4], out=dload);
    Not(in=instruction[5], out=anotsel);
    Nand(a=instruction[15], b=anotsel, out=aload);
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=ain);
    // Registers
    DRegister(in=aluout, load=dload, out=dout);
    ARegister(in=ain, load=aload, out=aout, out[0..14]=addressM);

    // Check condition
    Or(a=zero, b=negative, out=notpositive);
    Not(in=notpositive, out=positive);
    And(a=instruction[2], b=negative, out=condition1);
    And(a=instruction[1], b=zero, out=condition2);
    And(a=instruction[0], b=positive, out=condition3);
    Or(a=condition1, b=condition2, out=condition12);
    Or(a=condition12, b=condition3, out=condition123);
    And(a=instruction[15], b=condition123, out=dojump);

    // Update program counter
    Not(in=dojump, out=nextinstruction);
    PC(in=aout, load=dojump, inc=nextinstruction, reset=reset, out[0..14]=pc);
}
